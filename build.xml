<!--<project name="mgdb" default="deploy" basedir=".">-->
    <!---->
    <!--<property file="build.properties" />-->

    <!--<path id="classpath">-->
        <!--<fileset dir="./">-->
            <!--<include name="${srclib}/*.jar" />-->
        <!--</fileset>-->
    <!--</path>-->

    <!--&lt;!&ndash;make directories&ndash;&gt;-->
    <!--<target name="init">-->
        <!--<tstamp/>-->
        <!--<mkdir dir="${classesdir}"/>-->
        <!--<mkdir dir="${destdir}/WEB-INF/classes"/>-->
        <!--<mkdir dir="${properties}"/>-->
        <!--<mkdir dir="${destdir}/WEB-INF/lib/"/>-->
        <!--<copy todir="${destdir}/WEB-INF/lib">-->
            <!--<fileset dir="${srclib}"/>-->
        <!--</copy>-->
    <!--</target>-->

    <!--<target name="compile" depends="init">-->
        <!--<javac-->
            <!--srcdir="${srcdir}"-->
            <!--destdir="${classesdir}">-->
            <!--&lt;!&ndash; Make sure you set your classpath! &ndash;&gt;-->
            <!--<classpath>-->
                <!--<fileset dir="${srclib}" includes="*.jar"/>-->
                <!--<fileset dir="${tomcat.home}/lib" includes="servlet-api.jar"/>-->
                <!--<pathelement path="${classesdir}" />-->
            <!--</classpath>-->
        <!--</javac>-->

        <!--&lt;!&ndash;<javac classpathref="classpath" srcdir="src" destdir="${destdir}/WEB-INF/classes/" />&ndash;&gt;-->
        <!--&lt;!&ndash;<copy file="${properties}/service.properties" todir="${destdir}/WEB-INF/classes/"/>&ndash;&gt;-->
        <!--&lt;!&ndash;<copy file="${properties}/rdbm.properties" todir="${destdir}/WEB-INF/classes/"/>&ndash;&gt;-->
    <!--</target>-->

    <!--<target name="build" depends="compile">-->
        <!--<mkdir dir="${build.home}"/>-->
        <!--<mkdir dir="${build.home}/WEB-INF"/>-->

        <!--<copy todir="${build.home}/WEB-INF">-->
            <!--<fileset dir="." includes="${classesdir}/**,${srclib}/**" excludes="${classesdir}/driver/**"/>-->
        <!--</copy>-->


        <!--<copy todir="${build.home}/WEB-INF/${classesdir}">-->
            <!--<fileset dir="${properties}"/>-->
        <!--</copy>-->


        <!--<copy todir="${build.home}">-->
            <!--<fileset dir="${resources.dir}" includes="**/*.properties, *.html, *.jsp, *.ftl"/>-->
        <!--</copy>-->


        <!--<copy file="web.xml" todir="${destdir}/WEB-INF/web.xml"/>-->
        <!--<copy file="${resources.dir}/index.html" tofile="${build.home}/index.html"/>-->
        <!--<war destfile="${warfile}" basedir="${destdir}" needxmlfile="false"/>-->
    <!--</target>-->


    <!--<target name="deploy" depends="build">-->
        <!--<echo message="Deploying to tomcat at ${tomcat_webapps}"/>-->
        <!--<copy file="${warfile}" todir="${tomcat_webapps}" overwrite="yes"/>-->
    <!--</target>-->
    <!---->
    <!--&lt;!&ndash; This example dist target merely jars up the webapp files. &ndash;&gt;-->
    <!--<target name="submit" depends="clean">-->
        <!--<jar destfile="${submit.jar}" basedir="." excludes="bin/**,${srclib}/**,classes/**,build/**">-->
        <!--</jar>-->
    <!--</target>-->
    <!---->
    <!--&lt;!&ndash; This example dist target merely jars up the webapp files. &ndash;&gt;-->
    <!--<target name="dist" depends="build">-->
        <!--<jar destfile="${warfile}" basedir="${build.home}">-->
        <!--</jar>-->
    <!--</target>-->
    <!---->
    <!--<target name="clean">-->
        <!--<delete file="${warfile}" />-->
        <!--<delete file="${submit.jar}" />-->
        <!--<delete dir="${destdir}"/>-->
    <!--</target>-->
    <!---->
    <!--<target name="undeploy">-->
        <!--<delete file="${tomcat_webapps}/${warfile}" />-->
    <!--</target>-->
<!--</project>-->


    <!--
       build.xml file for SER422 Spring 2016
       Copyright 2016 Kevin A. Gary
       This build.xml does most of the things asked of you in the
       submission guidelines document. However, you may need to
       customize actions for these targets per each lab's
       particular submission requirements, so please take the time
       to understand how this works!
    -->

<project name="mgdb" default="compile" basedir=".">
    <property file="build.properties"/>

    <!-- init target makes the directory structure. You may not
         require this if you set your environment up by hand. -->
    <target name="init">
        <tstamp/>
        <mkdir dir="lib"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${javadoc.dir}"/>
        <mkdir dir="${properties.dir}"/>
    </target>

    <!-- Compiles your java files and puts the classes in classes.dir -->
    <target name="compile" depends="init">
        <javac
            srcdir="${src.dir}"
            destdir="${classes.dir}">
            <!-- Make sure you set your classpath! -->
            <classpath>
                <fileset dir="${lib.dir}" includes="*.jar"/>
                <fileset dir="${tomcat.home}/lib" includes="servlet-api.jar"/>
                <pathelement path="${classes.dir}" />
            </classpath>
        </javac>
    </target>

    <!-- The deploy target will be highly dependent on your deployed app.
         For example, if you are building a web-app, you should include
         commands to copy files over to your deploy directory according
         to the servlet specification, or create a .war file (via dist)
         and copy it over. If you are creating a standalone app (like this
         example does), you can create it in a given directory, or create
         your dist jar first that can be run using java -jar. -->
    <target name="deploy" depends="dist">
        <echo message="Deploying to tomcat at ${tomcat.home}"/>
        <copy file="${dist.jar}" todir="${tomcat.home}/webapps" overwrite="yes"/>
    </target>

    <target name="deploy-port1" depends="dist">
        <antcall target="deploy">
            <param name="port" value="${tomcat.port1}"/>
        </antcall>
    </target>
    <target name="deploy-port2" depends="dist">
        <antcall target="deploy">
            <param name="port" value="${tomcat.port2}"/>
        </antcall>
    </target>
    <target name="deploy-all" depends="dist">
        <antcall target="deploy-port1"/>
        <antcall target="deploy-port2"/>
    </target>

    <target name="build" depends="compile">
        <mkdir dir="${build.home}"/>
        <mkdir dir="${build.home}/WEB-INF"/>

        <copy todir="${build.home}/WEB-INF">
            <fileset dir="." includes="${classes.dir}/**,${lib.dir}/**" excludes="${classes.dir}/driver/**"/>
        </copy>

        <copy todir="${build.home}/WEB-INF/${classes.dir}">
            <fileset dir="${properties.dir}"/>
        </copy>

        <copy todir="${build.home}">
            <fileset dir="${resources.dir}" includes="**/*.properties, *.html, *.jsp, *.ftl"/>
        </copy>

        <copy file="web.xml" tofile="${build.home}/WEB-INF/web.xml"/>
        <copy file="${resources.dir}/index.html" tofile="${build.home}/index.html"/>
    </target>

    <!-- This example dist target merely jars up the webapp files. -->
    <target name="dist" depends="build">
        <jar destfile="${dist.jar}" basedir="${build.home}">
        </jar>
    </target>

    <!-- submit creates a single jarfile that you will upload to the
         Gradebook channel on the class portal. -->
    <target name="submit" depends="dist,javadoc">
        <jar destfile="${submit.jar}" basedir="." includes="README.txt,build.properties,build.xml,web.xml,${src.dir}/**,${docs.dir}/**,${javadoc.dir}/**,${properties.dir}/**,${lib.dir}/**,${classes.dir}/**">
        </jar>
    </target>

    <!-- Run javadoc on your java source code -->
    <target name="javadoc" depends="init">
        <javadoc packagenames="*"
                 sourcepath="src/java"
                 destdir="javadoc"
                 author="true"
                 version="true"
                 windowtitle="Lab 1 Servlets"
                 doctitle="InClass"
                 bottom="Copyright 2019 Joshua Goralczyk" />
    </target>

    <!-- Clean -->
    <target name="clean">
        <delete file="${dist.jar}"/>
        <delete dir="${tomcat.home}-${tomcat-port1}/webapps/${app.name}"/>
        <delete dir="${tomcat.home}-${tomcat-port2}/webapps/${app.name}"/>
        <delete file="${tomcat.home}-${tomcat-port1}/webapps/${dist.jar}"/>
        <delete file="${tomcat.home}-${tomcat.port2}/webapps/${dist.jar}"/>
        <delete dir="${build.home}"/>
        <delete dir="${classes.dir}"/>
    </target>

    <!-- Clean all -->
    <target name="cleanall" depends="clean">
        <delete dir="${javadoc.dir}"/>
        <delete file="${submit.jar}"/>
    </target>

</project>
